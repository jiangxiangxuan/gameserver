// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_login_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCVerifyTokenImpl();
void InitDefaultsCVerifyToken();
void InitDefaultsSVerifyTokenImpl();
void InitDefaultsSVerifyToken();
inline void InitDefaults() {
  InitDefaultsCVerifyToken();
  InitDefaultsSVerifyToken();
}
}  // namespace protobuf_login_2eproto
namespace platformprotocol {
class CVerifyToken;
class CVerifyTokenDefaultTypeInternal;
extern CVerifyTokenDefaultTypeInternal _CVerifyToken_default_instance_;
class SVerifyToken;
class SVerifyTokenDefaultTypeInternal;
extern SVerifyTokenDefaultTypeInternal _SVerifyToken_default_instance_;
}  // namespace platformprotocol
namespace google {
namespace protobuf {
template<> ::platformprotocol::CVerifyToken* Arena::Create< ::platformprotocol::CVerifyToken>(Arena*);
template<> ::platformprotocol::SVerifyToken* Arena::Create< ::platformprotocol::SVerifyToken>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace platformprotocol {

// ===================================================================

class CVerifyToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:platformprotocol.CVerifyToken) */ {
 public:
  CVerifyToken();
  virtual ~CVerifyToken();

  CVerifyToken(const CVerifyToken& from);

  inline CVerifyToken& operator=(const CVerifyToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVerifyToken(CVerifyToken&& from) noexcept
    : CVerifyToken() {
    *this = ::std::move(from);
  }

  inline CVerifyToken& operator=(CVerifyToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CVerifyToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVerifyToken* internal_default_instance() {
    return reinterpret_cast<const CVerifyToken*>(
               &_CVerifyToken_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CVerifyToken* other);
  friend void swap(CVerifyToken& a, CVerifyToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVerifyToken* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CVerifyToken>(NULL);
  }

  CVerifyToken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CVerifyToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CVerifyToken& from);
  void MergeFrom(const CVerifyToken& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CVerifyToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:platformprotocol.CVerifyToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct ::protobuf_login_2eproto::TableStruct;
  friend void ::protobuf_login_2eproto::InitDefaultsCVerifyTokenImpl();
};
// -------------------------------------------------------------------

class SVerifyToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:platformprotocol.SVerifyToken) */ {
 public:
  SVerifyToken();
  virtual ~SVerifyToken();

  SVerifyToken(const SVerifyToken& from);

  inline SVerifyToken& operator=(const SVerifyToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVerifyToken(SVerifyToken&& from) noexcept
    : SVerifyToken() {
    *this = ::std::move(from);
  }

  inline SVerifyToken& operator=(SVerifyToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SVerifyToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVerifyToken* internal_default_instance() {
    return reinterpret_cast<const SVerifyToken*>(
               &_SVerifyToken_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SVerifyToken* other);
  friend void swap(SVerifyToken& a, SVerifyToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVerifyToken* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SVerifyToken>(NULL);
  }

  SVerifyToken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SVerifyToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SVerifyToken& from);
  void MergeFrom(const SVerifyToken& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SVerifyToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:platformprotocol.SVerifyToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_login_2eproto::TableStruct;
  friend void ::protobuf_login_2eproto::InitDefaultsSVerifyTokenImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CVerifyToken

// string Token = 1;
inline void CVerifyToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CVerifyToken::token() const {
  // @@protoc_insertion_point(field_get:platformprotocol.CVerifyToken.Token)
  return token_.GetNoArena();
}
inline void CVerifyToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platformprotocol.CVerifyToken.Token)
}
#if LANG_CXX11
inline void CVerifyToken::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platformprotocol.CVerifyToken.Token)
}
#endif
inline void CVerifyToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platformprotocol.CVerifyToken.Token)
}
inline void CVerifyToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platformprotocol.CVerifyToken.Token)
}
inline ::std::string* CVerifyToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:platformprotocol.CVerifyToken.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVerifyToken::release_token() {
  // @@protoc_insertion_point(field_release:platformprotocol.CVerifyToken.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVerifyToken::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:platformprotocol.CVerifyToken.Token)
}

// -------------------------------------------------------------------

// SVerifyToken

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace platformprotocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
